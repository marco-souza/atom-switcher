#! /usr/bin/env node

/* Imports */
let switcher    = require("commander"),
    fs           = require("fs"),
    _           = require("lodash"),
    exec        = require("child_process").exec,
    chalk       = require("chalk");

/* CLI Setup */
switcher
    .version("0.0.2")
    // Create
    .option("-u, --use [name]", "Use a Environment [name], (Create it if not exists))")
    // Delete
    .option("-d, --delete [name]", "Delete [name] environment")
    // List
    .option("-l, --list", "List all created environments")
    .parse(process.argv)



/* Useful Functions */
let
    getLine = (num, token="-")=>{
        str = "\n";
        for (let i=0; i<num; i++) str += token;
        str += "\n";
        return str;
    },
    title = (str, color='white')=>{
        console.log(chalk.bold[color](
            getLine(str.split('').length+2),
            str,
            getLine(str.split('').length+2)
        ));
    },
    useEnv = (name)=> {
        if (!fs.existsSync(`${__dirname}/environments/`)) {
            fs.mkdirSync(`${__dirname}/environments/`);
        }
        fs.exists(`${__dirname}/environments/${name}`, (exists)=> {
            // If env not exists, create a hard-copy of the current env to the new
            if (!exists) {
                // Create Folder
                fs.mkdirSync(`${__dirname}/environments/${name}`);
                // Check if is a link
                let file = `${process.env.HOME}/.atom/config.cson`;
                if (fs.lstatSync(file).isSymbolicLink()) {
                    file = fs.readlinkSync(file);
                }
                // read current conig.cson
                dataCurrentEnv = fs.readFileSync(file);
                // Copy to new env config.cson
                fs.writeFileSync(`${__dirname}/environments/${name}/config.cson`, dataCurrentEnv);
            }

            return exec(`rm ~/.atom/config.cson; ln -sf ${__dirname}/environments/${name}/config.cson ~/.atom/config.cson`, (err)=> {
                if(err) {
                    console.log(`Error on switch to env ${chalk.bold(name)}: ${chalk.red.bold(err)}`);
                    process.exit(1);
                    throw err
                }
                console.log(`${chalk.green.bold("[SUCESS]")} ${name} Env in use!`);
                return true;
            });
        })
    },
    listEnv = ()=>{
        return exec(`ls ${__dirname}/environments/ `,(err, stdout)=>{
            if(err) {
                console.log(chalk.red.bold('[ERR]: You have no envs, sorry!'));
                process.exit(1)
            }

            listDirs = stdout.split("\n");

            // console.log(chalk.blue.bold("List of env\n${getLine()}"))
            title("List of Environments", 'blue');

            for (item of listDirs) {
                // item = item.split("").slice(0,-1).join("").split("/").slice(-1).toString();
                if (item)
                    console.log("\n Â· "+chalk.blue(item));
            }
            console.log("\n ");
            return true;
        });
    },
    deleteEnv = (name)=>{
        return exec(`rm -rf ${__dirname}/environments/${name}`, (err)=> {
            if(err) {
                console.log(`Error delete env ${chalk.bold(name)}: ${chalk.red.bold(err)}`);
                process.exit(1);
            }
            return true;
        });
    };


// Use passed env
if (switcher.use)
    if (_.isString(switcher.use)) {
        // Change home .atom/config.cson directory
        useEnv(switcher.use);
    }


// List Env
if (switcher.list)
    listEnv();


// Delete Env
if (switcher.delete)
    if (_.isString(switcher.delete)) {
        if( deleteEnv(switcher.delete) )
            console.log("Environment deleted Sucessfully!");
    }
